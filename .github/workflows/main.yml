# This is a basic workflow to help you get started with Actions

name: Deploy with docker

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  compile:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.4.2
#       - name: Set up JDK 17
#         uses: actions/setup-java@v3.5.0
#         with:
#           java-version: '17'
#           distribution: 'corretto'
#       - name: Dependies Cache
#         uses: actions/cache@v3.0.8
#         with:
#           path: ~/.m2/repository
#           key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
#           restore-keys: |
#             ${{ runner.os }}-maven-
#       - name: Build with Maven
#         run: mvn package -Dmaven.test.skip=true
#       - name: Docker Login
#         uses: docker/login-action@v2.0.0
#         with:
#     # Username used to log against the Docker registry
#           username: ${{ secrets.DOCKER_HUB_USERNAME }}
#     # Password or personal access token used to log against the Docker registry
#           password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
#       - name: Set up Docker Buildx
#         id: buildx
#         uses: docker/setup-buildx-action@v2.0.0
#       - name: Build and push Docker images
#         uses: docker/build-push-action@v3.1.1
#         with:
#     # Build's context is the set of files located in the specified PATH or URL
#           context: ./
#     # Path to the Dockerfile
#           file: ./Dockerfile
#     # Push is a shorthand for --output=type=registry
#           push: true
#     # List of tags
#           tags: ${{ secrets.DOCKER_HUB_USERNAME }}/myimage:latest
      
      - name: Write Config & Key Files
        run: |
          mkdir ~/.oci
          echo "[DEFAULT]" >> ~/.oci/config
          echo "user=${{secrets.OCI_USER_OCID}}" >> ~/.oci/config
          echo "fingerprint=${{secrets.OCI_FINGERPRINT}}" >> ~/.oci/config
          echo "region=${{secrets.OCI_REGION}}" >> ~/.oci/config
          echo "tenancy=${{secrets.OCI_TENANCY_OCID}}" >> ~/.oci/config
          echo "key_file=~/.oci/key.pem" >> ~/.oci/config
          echo "${{secrets.OCI_KEY_FILE}}" >> ~/.oci/key.pem
      - name: 'Install OCI CLI'
        run: |
          curl -L -O https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh
          chmod +x install.sh
          ./install.sh --accept-all-defaults
          echo "$HOME/runner/bin" >> $GITHUB_PATH
          exec -l $SHELL  
      - name: 'Fix Config File Permissions'
        run: |
          oci setup repair-file-permissions --file /home/runner/.oci/config
          oci setup repair-file-permissions --file /home/runner/.oci/key.pem
        
