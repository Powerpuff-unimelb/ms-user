# This is a basic workflow to help you get started with Actions

name: Deploy

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  compile:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.4.2
      - name: Set up JDK 17
        uses: actions/setup-java@v3.5.0
        with:
          java-version: '17'
          distribution: 'corretto'
      - name: Dependies Cache
        uses: actions/cache@v3.0.8
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Build with Maven
        run: mvn package -Dmaven.test.skip=true
      - name: Docker Login
        uses: docker/login-action@v2.0.0
        with:
    # Username used to log against the Docker registry
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
    # Password or personal access token used to log against the Docker registry
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2.0.0
      - name: Build and push Docker images
        uses: docker/build-push-action@v3.1.1
        with:
    # Build's context is the set of files located in the specified PATH or URL
          context: ./
    # Path to the Dockerfile
          file: ./Dockerfile
    # Push is a shorthand for --output=type=registry
          push: true
    # List of tags
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/ms-user:latest
      
      - name: Write Config & Key Files
        run: |
          mkdir ~/.oci
          echo "[DEFAULT]" >> ~/.oci/config
          echo "user=${{secrets.OCI_USER_OCID}}" >> ~/.oci/config
          echo "fingerprint=${{secrets.OCI_FINGERPRINT}}" >> ~/.oci/config
          echo "region=${{secrets.OCI_REGION}}" >> ~/.oci/config
          echo "tenancy=${{secrets.OCI_TENANCY_OCID}}" >> ~/.oci/config
          echo "key_file=~/.oci/key.pem" >> ~/.oci/config
          echo "${{secrets.OCI_KEY_FILE}}" >> ~/.oci/key.pem
          echo "${{secrets.VM_SSH_PUB_KEY}}" >> /home/runner/.oci/id_vm.pub
      - name: Install OCI CLI
        run: |
          curl -L -O https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh
          chmod +x install.sh
          ./install.sh --accept-all-defaults
          echo "/home/runner/bin" >> $GITHUB_PATH
          exec -l $SHELL
      - name: Fix Config File Permissions
        run: |
          oci setup repair-file-permissions --file /home/runner/.oci/config
          oci setup repair-file-permissions --file /home/runner/.oci/key.pem
      - name: Check Existing Instance
        run: |
          echo "INSTANCE_OCID=$( \
            oci compute instance list \
            --lifecycle-state RUNNING \
            --compartment-id ${{secrets.VM_COMPARTMENT_OCID}} \
            --display-name cicd-demo \
            --query "data [0].id" \
            --raw-output \
          )" >> $GITHUB_ENV
      - name: Create Instance
        if: ${{!env.INSTANCE_OCID}}
        run: |
          echo "INSTANCE_OCID=$( \
            oci compute instance launch \
              -c ${{secrets.VM_COMPARTMENT_OCID}} \
              --availability-domain ${{secrets.VM_AVAILABILITY_DOMAIN}} \
              --shape ${{secrets.VM_SHAPE}} \
              --shape-config '{"memoryInGBs": 1, "ocpus": 1}' \
              --assign-public-ip true \
              --display-name cicd-demo \
              --image-id ${{secrets.VM_CUSTOM_IMAGE_OCID}} \
              --ssh-authorized-keys-file /home/runner/.oci/id_vm.pub \
              --subnet-id ${{secrets.VM_SUBNET_OCID}} \
              --wait-for-state RUNNING \
              --query "data.id" \
              --raw-output \
          )" >> $GITHUB_ENV
      - name: 'Get Instance IP'
        run: |
          echo "INSTANCE_IP=$( \
            oci compute instance list-vnics \
            --instance-id ${{env.INSTANCE_OCID}} \
            --query 'data [0]."public-ip"' \
            --raw-output \
          )" >> $GITHUB_ENV
          echo Instance IP: ${{ env.INSTANCE_IP }}
      - name: 'Wait for SSH'
        run: |
          while ! nc -w5 -z ${{ env.INSTANCE_IP }} 22; do
                  sleep 5
                  echo "SSH not available..."
          done; echo "SSH ready!"
      - name: 'Stop App'
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: ${{env.INSTANCE_IP}}
          username: opc
          key: ${{secrets.VM_SSH_PRIVATE_KEY}}
          script: |
            pid=`ps aux | grep "[c]icd-demo.jar" | awk '{print $2}'`
            if [ "$pid" == "" ]; then
              echo "Process not found"
            else
              kill -9 $pid
            fi
            sudo mkdir -p app
      - name: 'Push JAR'
        uses: horochx/deploy-via-scp@1.1.0
        with:
          host: ${{ env.INSTANCE_IP }}
          user: opc
          key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
          local: "target/user-service.jar"
          remote: "/home/opc/app"

      - name: 'Start App'
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: ${{ env.INSTANCE_IP }}
          username: opc
          key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
          script: |
            nohup java -jar "/home/opc/app/user-service.jar" > output.$(date --iso).log 2>&1 &
